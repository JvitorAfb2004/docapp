const { Sequelize, DataTypes } = require('sequelize');
const config = require('../config/config.json');

// Configurar conex√£o do banco
const sequelize = new Sequelize(
  config.development.database,
  config.development.username,
  config.development.password,
  config.development
);

async function migrateDatabaseChanges() {
  try {
    console.log('üîÑ Iniciando migra√ß√£o do banco de dados...');
    
    // Conectar ao banco
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com banco estabelecida');
    
    const queryInterface = sequelize.getQueryInterface();
    
    // Verificar se as colunas j√° existem
    const tableInfo = await queryInterface.describeTable('documentos_gerados');
    
    const newColumns = [
      'dadosProcessados',
      'dadosOriginais', 
      'status',
      'dataProcessamento'
    ];
    
    // Adicionar colunas se n√£o existirem
    for (const column of newColumns) {
      if (!tableInfo[column]) {
        console.log(`‚ûï Adicionando coluna: ${column}`);
        
        switch (column) {
          case 'dadosProcessados':
            await queryInterface.addColumn('documentos_gerados', 'dadosProcessados', {
              type: DataTypes.JSONB,
              allowNull: true, // Temporariamente permitir null para dados existentes
              comment: 'Dados processados do formul√°rio (para gerar DOCX depois)'
            });
            break;
            
          case 'dadosOriginais':
            await queryInterface.addColumn('documentos_gerados', 'dadosOriginais', {
              type: DataTypes.JSONB,
              allowNull: true, // Temporariamente permitir null para dados existentes
              comment: 'Dados originais do formul√°rio enviado pelo usu√°rio'
            });
            break;
            
          case 'status':
            // Primeiro, verificar se o tipo ENUM j√° existe
            try {
              const enumCheck = await sequelize.query(
                "SELECT 1 FROM pg_type WHERE typname = 'enum_documentos_gerados_status'",
                { type: sequelize.QueryTypes.SELECT }
              );
              
              if (enumCheck.length === 0) {
                // Criar o tipo ENUM
                await sequelize.query(
                  "CREATE TYPE enum_documentos_gerados_status AS ENUM ('processado', 'arquivo_gerado')"
                );
                console.log('‚úÖ Tipo ENUM status criado');
              } else {
                console.log('‚úÖ Tipo ENUM status j√° existe');
              }
            } catch (enumError) {
              console.log('‚ö†Ô∏è Erro ao verificar/criar ENUM:', enumError.message);
              // Tentar continuar mesmo com erro
            }
            
            // Adicionar a coluna com SQL direto para evitar problemas do Sequelize
            try {
              await sequelize.query(
                "ALTER TABLE documentos_gerados ADD COLUMN status enum_documentos_gerados_status NOT NULL DEFAULT 'arquivo_gerado'"
              );
              await sequelize.query(
                "COMMENT ON COLUMN documentos_gerados.status IS 'Status do documento: processado (dados salvos) ou arquivo_gerado (DOCX criado)'"
              );
              console.log('‚úÖ Coluna status adicionada');
            } catch (colError) {
              console.log('‚ö†Ô∏è Erro ao adicionar coluna status:', colError.message);
            }
            break;
            
          case 'dataProcessamento':
            try {
              await sequelize.query(
                "ALTER TABLE documentos_gerados ADD COLUMN \"dataProcessamento\" TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()"
              );
              await sequelize.query(
                "COMMENT ON COLUMN documentos_gerados.\"dataProcessamento\" IS 'Data quando os dados foram processados'"
              );
              console.log('‚úÖ Coluna dataProcessamento adicionada');
            } catch (colError) {
              console.log('‚ö†Ô∏è Erro ao adicionar dataProcessamento:', colError.message);
            }
            break;
        }
      } else {
        console.log(`‚úÖ Coluna ${column} j√° existe`);
      }
    }
    
    // Modificar colunas existentes para permitir NULL
    console.log('üîß Modificando colunas existentes...');
    
    try {
      await queryInterface.changeColumn('documentos_gerados', 'nomeArquivo', {
        type: DataTypes.STRING,
        allowNull: true, // Agora opcional
        comment: 'Nome do arquivo gerado'
      });
      console.log('‚úÖ nomeArquivo modificado para opcional');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao modificar nomeArquivo:', error.message);
    }
    
    try {
      await queryInterface.changeColumn('documentos_gerados', 'caminhoArquivo', {
        type: DataTypes.STRING,
        allowNull: true, // Agora opcional
        comment: 'Caminho completo do arquivo'
      });
      console.log('‚úÖ caminhoArquivo modificado para opcional');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao modificar caminhoArquivo:', error.message);
    }
    
    try {
      await queryInterface.changeColumn('documentos_gerados', 'tamanhoArquivo', {
        type: DataTypes.INTEGER,
        allowNull: true, // Agora opcional
        defaultValue: null,
        comment: 'Tamanho do arquivo em bytes'
      });
      console.log('‚úÖ tamanhoArquivo modificado para opcional');
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao modificar tamanhoArquivo:', error.message);
    }
    
    // Criar √≠ndices se n√£o existirem
    console.log('üìä Criando √≠ndices...');
    
    try {
      await queryInterface.addIndex('documentos_gerados', ['status'], {
        name: 'documentos_gerados_status_idx'
      });
      console.log('‚úÖ √çndice para status criado');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice status j√° existe ou erro:', error.message);
    }
    
    try {
      await queryInterface.addIndex('documentos_gerados', ['dataProcessamento'], {
        name: 'documentos_gerados_data_processamento_idx'
      });
      console.log('‚úÖ √çndice para dataProcessamento criado');
    } catch (error) {
      console.log('‚ö†Ô∏è √çndice dataProcessamento j√° existe ou erro:', error.message);
    }
    
    console.log('üéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('');
    console.log('üìã Resumo das mudan√ßas:');
    console.log('- Adicionadas colunas: dadosProcessados, dadosOriginais, status, dataProcessamento');
    console.log('- Modificadas para opcional: nomeArquivo, caminhoArquivo, tamanhoArquivo');
    console.log('- Criados √≠ndices para melhor performance');
    console.log('');
    console.log('üöÄ Sistema pronto para nova funcionalidade:');
    console.log('- Processamento individual de DFD/ETP');
    console.log('- Armazenamento de dados no banco');
    console.log('- Gera√ß√£o de DOCX sob demanda');
    
  } catch (error) {
    console.error('‚ùå Erro na migra√ß√£o:', error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Executar migra√ß√£o se script for chamado diretamente
if (require.main === module) {
  migrateDatabaseChanges()
    .then(() => {
      console.log('‚úÖ Migra√ß√£o executada com sucesso!');
      process.exit(0);
    })
    .catch(error => {
      console.error('‚ùå Falha na migra√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { migrateDatabaseChanges };